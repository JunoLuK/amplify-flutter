// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon
#import "NativePushNotificationsPlugin.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSDictionary<NSString *, id> *wrapResult(id result, FlutterError *error) {
  NSDictionary *errorDict = (NSDictionary *)[NSNull null];
  if (error) {
    errorDict = @{
        @"code": (error.code ?: [NSNull null]),
        @"message": (error.message ?: [NSNull null]),
        @"details": (error.details ?: [NSNull null]),
        };
  }
  return @{
      @"result": (result ?: [NSNull null]),
      @"error": errorDict,
      };
}
static id GetNullableObject(NSDictionary* dict, id key) {
  id result = dict[key];
  return (result == [NSNull null]) ? nil : result;
}
static id GetNullableObjectAtIndex(NSArray* array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}


@interface PermissionsOptions ()
+ (PermissionsOptions *)fromMap:(NSDictionary *)dict;
+ (nullable PermissionsOptions *)nullableFromMap:(NSDictionary *)dict;
- (NSDictionary *)toMap;
@end

@implementation PermissionsOptions
+ (instancetype)makeWithAlert:(NSNumber *)alert
    sound:(NSNumber *)sound
    badge:(NSNumber *)badge {
  PermissionsOptions* pigeonResult = [[PermissionsOptions alloc] init];
  pigeonResult.alert = alert;
  pigeonResult.sound = sound;
  pigeonResult.badge = badge;
  return pigeonResult;
}
+ (PermissionsOptions *)fromMap:(NSDictionary *)dict {
  PermissionsOptions *pigeonResult = [[PermissionsOptions alloc] init];
  pigeonResult.alert = GetNullableObject(dict, @"alert");
  NSAssert(pigeonResult.alert != nil, @"");
  pigeonResult.sound = GetNullableObject(dict, @"sound");
  NSAssert(pigeonResult.sound != nil, @"");
  pigeonResult.badge = GetNullableObject(dict, @"badge");
  NSAssert(pigeonResult.badge != nil, @"");
  return pigeonResult;
}
+ (nullable PermissionsOptions *)nullableFromMap:(NSDictionary *)dict { return (dict) ? [PermissionsOptions fromMap:dict] : nil; }
- (NSDictionary *)toMap {
  return @{
    @"alert" : (self.alert ?: [NSNull null]),
    @"sound" : (self.sound ?: [NSNull null]),
    @"badge" : (self.badge ?: [NSNull null]),
  };
}
@end

@interface NativePushNotificationsPluginCodecReader : FlutterStandardReader
@end
@implementation NativePushNotificationsPluginCodecReader
- (nullable id)readValueOfType:(UInt8)type 
{
  switch (type) {
    case 128:     
      return [PermissionsOptions fromMap:[self readValue]];
    
    default:    
      return [super readValueOfType:type];
    
  }
}
@end

@interface NativePushNotificationsPluginCodecWriter : FlutterStandardWriter
@end
@implementation NativePushNotificationsPluginCodecWriter
- (void)writeValue:(id)value 
{
  if ([value isKindOfClass:[PermissionsOptions class]]) {
    [self writeByte:128];
    [self writeValue:[value toMap]];
  } else 
{
    [super writeValue:value];
  }
}
@end

@interface NativePushNotificationsPluginCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation NativePushNotificationsPluginCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[NativePushNotificationsPluginCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[NativePushNotificationsPluginCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *NativePushNotificationsPluginGetCodec() {
  static dispatch_once_t sPred = 0;
  static FlutterStandardMessageCodec *sSharedObject = nil;
  dispatch_once(&sPred, ^{
    NativePushNotificationsPluginCodecReaderWriter *readerWriter = [[NativePushNotificationsPluginCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}


void NativePushNotificationsPluginSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<NativePushNotificationsPlugin> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativePushNotificationsPlugin.getPermissionStatus"
        binaryMessenger:binaryMessenger
        codec:NativePushNotificationsPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getPermissionStatusWithCompletion:)], @"NativePushNotificationsPlugin api (%@) doesn't respond to @selector(getPermissionStatusWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getPermissionStatusWithCompletion:^(NSString *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativePushNotificationsPlugin.requestPermissions"
        binaryMessenger:binaryMessenger
        codec:NativePushNotificationsPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(requestPermissionsWithPermissionOptions:completion:)], @"NativePushNotificationsPlugin api (%@) doesn't respond to @selector(requestPermissionsWithPermissionOptions:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        PermissionsOptions *arg_withPermissionOptions = GetNullableObjectAtIndex(args, 0);
        [api requestPermissionsWithPermissionOptions:arg_withPermissionOptions completion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativePushNotificationsPlugin.getLaunchNotification"
        binaryMessenger:binaryMessenger
        codec:NativePushNotificationsPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getLaunchNotificationWithCompletion:)], @"NativePushNotificationsPlugin api (%@) doesn't respond to @selector(getLaunchNotificationWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getLaunchNotificationWithCompletion:^(NSDictionary<id, id> *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativePushNotificationsPlugin.getBadgeCount"
        binaryMessenger:binaryMessenger
        codec:NativePushNotificationsPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(getBadgeCountWithCompletion:)], @"NativePushNotificationsPlugin api (%@) doesn't respond to @selector(getBadgeCountWithCompletion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        [api getBadgeCountWithCompletion:^(NSNumber *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativePushNotificationsPlugin.setBadgeCount"
        binaryMessenger:binaryMessenger
        codec:NativePushNotificationsPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(setBadgeCountWithBadgeCount:error:)], @"NativePushNotificationsPlugin api (%@) doesn't respond to @selector(setBadgeCountWithBadgeCount:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSNumber *arg_withBadgeCount = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api setBadgeCountWithBadgeCount:arg_withBadgeCount error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.NativePushNotificationsPlugin.completeNotification"
        binaryMessenger:binaryMessenger
        codec:NativePushNotificationsPluginGetCodec()        ];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(completeNotificationWithCompletionHandlerId:error:)], @"NativePushNotificationsPlugin api (%@) doesn't respond to @selector(completeNotificationWithCompletionHandlerId:error:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_withCompletionHandlerId = GetNullableObjectAtIndex(args, 0);
        FlutterError *error;
        [api completeNotificationWithCompletionHandlerId:arg_withCompletionHandlerId error:&error];
        callback(wrapResult(nil, error));
      }];
    }
    else {
      [channel setMessageHandler:nil];
    }
  }
}
