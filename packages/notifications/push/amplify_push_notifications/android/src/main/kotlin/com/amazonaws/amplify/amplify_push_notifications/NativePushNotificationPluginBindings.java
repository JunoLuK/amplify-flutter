// 
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
// Autogenerated from Pigeon (v3.2.9), do not edit directly.
// See also: https://pub.dev/packages/pigeon

package com.amazonaws.amplify.amplify_push_notifications;

import android.util.Log;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import io.flutter.plugin.common.BasicMessageChannel;
import io.flutter.plugin.common.BinaryMessenger;
import io.flutter.plugin.common.MessageCodec;
import io.flutter.plugin.common.StandardMessageCodec;
import java.io.ByteArrayOutputStream;
import java.nio.ByteBuffer;
import java.util.Arrays;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.HashMap;

/** Generated class from Pigeon. */
@SuppressWarnings({"unused", "unchecked", "CodeBlock2Expr", "RedundantSuppression"})
public class NativePushNotificationPluginBindings {

  /** Generated class from Pigeon that represents data sent in messages. */
  public static class PermissionsOptions {
    private @NonNull Boolean alert;
    public @NonNull Boolean getAlert() { return alert; }
    public void setAlert(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"alert\" is null.");
      }
      this.alert = setterArg;
    }

    private @NonNull Boolean sound;
    public @NonNull Boolean getSound() { return sound; }
    public void setSound(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"sound\" is null.");
      }
      this.sound = setterArg;
    }

    private @NonNull Boolean badge;
    public @NonNull Boolean getBadge() { return badge; }
    public void setBadge(@NonNull Boolean setterArg) {
      if (setterArg == null) {
        throw new IllegalStateException("Nonnull field \"badge\" is null.");
      }
      this.badge = setterArg;
    }

    /** Constructor is private to enforce null safety; use Builder. */
    private PermissionsOptions() {}
    public static final class Builder {
      private @Nullable Boolean alert;
      public @NonNull Builder setAlert(@NonNull Boolean setterArg) {
        this.alert = setterArg;
        return this;
      }
      private @Nullable Boolean sound;
      public @NonNull Builder setSound(@NonNull Boolean setterArg) {
        this.sound = setterArg;
        return this;
      }
      private @Nullable Boolean badge;
      public @NonNull Builder setBadge(@NonNull Boolean setterArg) {
        this.badge = setterArg;
        return this;
      }
      public @NonNull PermissionsOptions build() {
        PermissionsOptions pigeonReturn = new PermissionsOptions();
        pigeonReturn.setAlert(alert);
        pigeonReturn.setSound(sound);
        pigeonReturn.setBadge(badge);
        return pigeonReturn;
      }
    }
    @NonNull Map<String, Object> toMap() {
      Map<String, Object> toMapResult = new HashMap<>();
      toMapResult.put("alert", alert);
      toMapResult.put("sound", sound);
      toMapResult.put("badge", badge);
      return toMapResult;
    }
    static @NonNull PermissionsOptions fromMap(@NonNull Map<String, Object> map) {
      PermissionsOptions pigeonResult = new PermissionsOptions();
      Object alert = map.get("alert");
      pigeonResult.setAlert((Boolean)alert);
      Object sound = map.get("sound");
      pigeonResult.setSound((Boolean)sound);
      Object badge = map.get("badge");
      pigeonResult.setBadge((Boolean)badge);
      return pigeonResult;
    }
  }

  public interface Result<T> {
    void success(T result);
    void error(Throwable error);
  }
  private static class NativePushNotificationsPluginCodec extends StandardMessageCodec {
    public static final NativePushNotificationsPluginCodec INSTANCE = new NativePushNotificationsPluginCodec();
    private NativePushNotificationsPluginCodec() {}
    @Override
    protected Object readValueOfType(byte type, ByteBuffer buffer) {
      switch (type) {
        case (byte)128:         
          return PermissionsOptions.fromMap((Map<String, Object>) readValue(buffer));
        
        default:        
          return super.readValueOfType(type, buffer);
        
      }
    }
    @Override
    protected void writeValue(ByteArrayOutputStream stream, Object value)     {
      if (value instanceof PermissionsOptions) {
        stream.write(128);
        writeValue(stream, ((PermissionsOptions) value).toMap());
      } else 
{
        super.writeValue(stream, value);
      }
    }
  }

  /** Generated interface from Pigeon that represents a handler of messages from Flutter.*/
  public interface NativePushNotificationsPlugin {
    void getPermissionStatus(Result<String> result);
    void requestPermissions(@NonNull PermissionsOptions withPermissionOptions, Result<Boolean> result);
    @Nullable Map<Object, Object> getLaunchNotification();
    @NonNull Long getBadgeCount();
    void setBadgeCount(@NonNull Long withBadgeCount);
    void completeNotification(@NonNull String withCompletionHandlerId);

    /** The codec used by NativePushNotificationsPlugin. */
    static MessageCodec<Object> getCodec() {
      return NativePushNotificationsPluginCodec.INSTANCE;
    }

    /** Sets up an instance of `NativePushNotificationsPlugin` to handle messages through the `binaryMessenger`. */
    static void setup(BinaryMessenger binaryMessenger, NativePushNotificationsPlugin api) {
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativePushNotificationsPlugin.getPermissionStatus", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Result<String> resultCallback = new Result<String>() {
                public void success(String result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.getPermissionStatus(resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativePushNotificationsPlugin.requestPermissions", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              PermissionsOptions withPermissionOptionsArg = (PermissionsOptions)args.get(0);
              if (withPermissionOptionsArg == null) {
                throw new NullPointerException("withPermissionOptionsArg unexpectedly null.");
              }
              Result<Boolean> resultCallback = new Result<Boolean>() {
                public void success(Boolean result) {
                  wrapped.put("result", result);
                  reply.reply(wrapped);
                }
                public void error(Throwable error) {
                  wrapped.put("error", wrapError(error));
                  reply.reply(wrapped);
                }
              };

              api.requestPermissions(withPermissionOptionsArg, resultCallback);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
              reply.reply(wrapped);
            }
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativePushNotificationsPlugin.getLaunchNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Map<Object, Object> output = api.getLaunchNotification();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativePushNotificationsPlugin.getBadgeCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              Long output = api.getBadgeCount();
              wrapped.put("result", output);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativePushNotificationsPlugin.setBadgeCount", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              Number withBadgeCountArg = (Number)args.get(0);
              if (withBadgeCountArg == null) {
                throw new NullPointerException("withBadgeCountArg unexpectedly null.");
              }
              api.setBadgeCount((withBadgeCountArg == null) ? null : withBadgeCountArg.longValue());
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
      {
        BasicMessageChannel<Object> channel =
            new BasicMessageChannel<>(binaryMessenger, "dev.flutter.pigeon.NativePushNotificationsPlugin.completeNotification", getCodec());
        if (api != null) {
          channel.setMessageHandler((message, reply) -> {
            Map<String, Object> wrapped = new HashMap<>();
            try {
              ArrayList<Object> args = (ArrayList<Object>)message;
              String withCompletionHandlerIdArg = (String)args.get(0);
              if (withCompletionHandlerIdArg == null) {
                throw new NullPointerException("withCompletionHandlerIdArg unexpectedly null.");
              }
              api.completeNotification(withCompletionHandlerIdArg);
              wrapped.put("result", null);
            }
            catch (Error | RuntimeException exception) {
              wrapped.put("error", wrapError(exception));
            }
            reply.reply(wrapped);
          });
        } else {
          channel.setMessageHandler(null);
        }
      }
    }
  }
  private static Map<String, Object> wrapError(Throwable exception) {
    Map<String, Object> errorMap = new HashMap<>();
    errorMap.put("message", exception.toString());
    errorMap.put("code", exception.getClass().getSimpleName());
    errorMap.put("details", "Cause: " + exception.getCause() + ", Stacktrace: " + Log.getStackTraceString(exception));
    return errorMap;
  }
}
